/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
private:
    void inorder(TreeNode* root,vector<int>& arr){
        if(!root)
            return;
        inorder(root->left,arr);
        arr.push_back(root->val);
        inorder(root->right,arr);

    }

    vector<int> inorderarr(TreeNode* root){
        vector<int> arr;
        inorder(root,arr);
        return arr;
    }
public:
    BSTIterator(TreeNode* root) 
        :arr(inorderarr(root)),
        count(0)
    {

    }
    
    int next() {
        return arr[count++];
    }
    
    bool hasNext() {
        return count<arr.size();
    }
private:
    vector<int> arr;
    int count;
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
