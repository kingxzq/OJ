class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> ret;
        unordered_map<string,int> hash1;
        for(const auto& str:words) hash1[str]++;

        int n=s.size(),m=words.size(),len=words[0].size();
        for(int i=0;i<len;++i){
            unordered_map<string,int> hash2;
            for(int left=i,right=i,count=0;right+len<=n;right+=len){
                string str1=s.substr(right,len);
                hash2[str1]++;;
                if(hash1.count(str1)&&hash2[str1]<=hash1[str1]) count++;

                if(right-left+1>len*m){
                    string str2=s.substr(left,len);
                    if(hash1.count(str2)&&hash2[str2]<=hash1[str2]) count--;
                    hash2[str2]--;
                    left+=len;
                }

                if(count==m) ret.push_back(left);
            }
        }
        return ret;
    }
};
