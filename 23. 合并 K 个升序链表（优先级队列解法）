/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    struct comp{
        bool operator()(const ListNode* l1,const ListNode* l2){
            return l1->val>l2->val;
        }
    };
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,comp> heap;

        for(auto li:lists) if(li) heap.push(li);

        ListNode* ret=new ListNode();
        ListNode* prev=ret;
        while(!heap.empty()){
            ListNode* t=heap.top();
            heap.pop();
            prev->next=t;
            prev=t;
            if(t->next) heap.push(t->next);
        }

        prev=ret->next;
        delete ret;
        return prev;
    }
};
