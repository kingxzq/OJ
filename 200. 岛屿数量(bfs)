class Solution {
    const int dx[4] = {0, 0, 1, -1};  // 表示上、下、左、右四个方向的相对坐标变化
    const int dy[4] = {1, -1, 0, 0};
    int m, n;  // m表示行数，n表示列数
    queue<pair<int, int>> q;  // 用于BFS的队列

    // BFS函数，从起点 (i, j) 开始遍历并标记属于同一岛屿的所有位置
    void bfs(vector<vector<char>>& grid, int i, int j) {
        q.push({i, j});  // 将起点入队
        grid[i][j] = '0';  // 标记已经遍历过的位置
        while (!q.empty()) {
            auto [a, b] = q.front();
            q.pop();
            for (int k = 0; k < 4; ++k) {
                int x = a + dx[k], y = b + dy[k];
                // 判断新的坐标是否越界，并且是岛屿的一部分
                if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == '1') {
                    q.push({x, y});  // 将相邻的岛屿位置入队
                    grid[x][y] = '0';  // 标记已经遍历过的位置
                }
            }
        }
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        m = grid.size();  // 获取行数
        n = grid[0].size();  // 获取列数
        int ret = 0;  // 记录岛屿数量

        // 遍历整个网格
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == '1') {
                    ret++;  // 发现新的岛屿，增加计数
                    bfs(grid, i, j);  // 使用BFS遍历并标记所有属于同一岛屿的位置
                }
            }
        }

        return ret;  // 返回岛屿数量
    }
};
