typedef struct {
    int front;
    int rear;
    int capacity;
    int* elem;
} MyCircularQueue;


MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue* ret=malloc(sizeof(MyCircularQueue));
    ret->capacity=k+1;
    ret->elem=malloc(sizeof(int)*ret->capacity);
    ret->front=ret->rear=0;
    return ret;
}

bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if((obj->rear+1)%obj->capacity==obj->front)
        return false;
    obj->elem[obj->rear]=value;
    obj->rear=(obj->rear+1)%obj->capacity;
    return true;
}

bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if(obj->front==obj->rear)
        return false;
    obj->front=(obj->front+1)%obj->capacity;
    return true;
}

int myCircularQueueFront(MyCircularQueue* obj) {
    if(obj->front==obj->rear)
        return -1;
    return obj->elem[obj->front];
}

int myCircularQueueRear(MyCircularQueue* obj) {
    if(obj->front==obj->rear)
        return -1;
    return obj->elem[(obj->rear-1+obj->capacity)%obj->capacity];
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    return obj->front==obj->rear;
}

bool myCircularQueueIsFull(MyCircularQueue* obj) {
    return (obj->rear+1)%obj->capacity==obj->front;
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj->elem);
    free(obj);
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/
