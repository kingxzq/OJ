typedef struct {
    int queue1[100];
    int queue2[100];
    int front1;
    int front2;
    int rear1;
    int rear2;
} MyStack;


MyStack* myStackCreate() {
    MyStack* stack=malloc(sizeof(MyStack));
    stack->front1=0;
    stack->front2=0;
    stack->rear1=0;
    stack->rear2=0;
    return stack;
}

void myStackPush(MyStack* obj, int x) {
    obj->queue1[(obj->rear1)++]=x;
}

int myStackPop(MyStack* obj) {
    int front1=obj->front1;
    int front2=obj->front2;
    int rear1=obj->rear1;
    int rear2=obj->rear2;
    while(rear1-front1>1)
    {
        obj->queue2[rear2++]=obj->queue1[front1++];
    }
    int top=obj->queue1[front1++];
    while(front2!=rear2)
    {
        obj->queue1[rear1++]=obj->queue2[front2++];
    }
    obj->front1=front1;
    obj->front2=front2;
    obj->rear1=rear1;
    obj->rear2=rear2;

    return top;
}

int myStackTop(MyStack* obj) {
    return obj->queue1[obj->rear1-1];
}

bool myStackEmpty(MyStack* obj) {
    return obj->queue1[obj->front1]==obj->queue2[obj->front2];
}

void myStackFree(MyStack* obj) {
    obj->front1=obj->front2=obj->rear1=obj->rear2=0;
}


